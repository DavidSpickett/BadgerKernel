name: build_and_test

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Apt Installs
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip shellcheck

    - name: Pip Install
      run: |
        pip3 install setuptools wheel
        pip3 install virtualenv
        # Create this outside of the git checkout
        python3 -m virtualenv ../checkenv
        source ../checkenv/bin/activate
        pip3 install cogapp pycodestyle

    # Require that the previous steps succeed but allow the next steps
    # to fail and still run the rest of the checks.
    - name: Set SHOULD_CONTINUE=YES
      run: echo "SHOULD_CONTINUE=YES" >> $GITHUB_ENV
      if: ${{ success() }}
    - name: Set SHOULD_CONTINUE=NO
      run: echo "SHOULD_CONTINUE=NO" >> $GITHUB_ENV
      if: ${{ failure() }}

    - name: Check Cog
      run: |
        # Check that we re-ran cog as needed
        source ../checkenv/bin/activate
        export PYTHONPATH=.
        cog -r `find -name "*.c"` `find -name "*.cpp"` `find -name "*.h"` `find -name "*.yml"`
        # See if anything changed
        git diff > /tmp/cog.diff
        cat /tmp/cog.diff
        # Reset for next check
        git checkout .
        # Fail the stage so we know to re-run cog
        ! test -s /tmp/cog.diff
      if: ${{ env.SHOULD_CONTINUE == 'YES' && ( failure() || success() ) }}

    - name: Clang Format
      run: |
        # Check that we ran clang-format
        clang-format-11 -i `find -name "*.c"` `find -name "*.cpp"` `find -name "*.h"`
        # See if anything changed
        git diff > /tmp/clang-format.diff
        cat /tmp/clang-format.diff
        # Reset for next checkout
        git checkout .
        ! test -s /tmp/clang-format.diff
      if: ${{ env.SHOULD_CONTINUE == 'YES' && ( failure() || success() ) }}

    - name: Pycodestyle
      run: |
        source ../checkenv/bin/activate
        pycodestyle `find -name "*.py"`
      if: ${{ env.SHOULD_CONTINUE == 'YES' && ( failure() || success() ) }}

    - name: Shellcheck
      run: |
        shellcheck `find -name "*.sh"`
      if: ${{ env.SHOULD_CONTINUE == 'YES' && ( failure() || success() ) }}

  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_platform: ["ARM", "THUMB", "AARCH64", "RASPI4"]

    steps:
    - uses: actions/checkout@v2

    - name: Apt Installs
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip ccache expect qemu-system-arm
        echo "CCACHE_DIR=$(pwd)/.ccache" >> $GITHUB_ENV

    - if: matrix.build_platform == 'AARCH64' || matrix.build_platform == 'RASPI4'
      name: Export Toolchain URL AArch64
      run: |
        echo "TOOLCHAIN_URL=https://developer.arm.com/-/media/Files/downloads/gnu-a/9.2-2019.12/binrel/gcc-arm-9.2-2019.12-x86_64-aarch64-none-elf.tar.xz" >> $GITHUB_ENV

    - if: matrix.build_platform == 'ARM' || matrix.build_platform == 'THUMB'
      name: Export Toolchain URL Arm/Thumb
      run: |
        echo "TOOLCHAIN_URL=https://developer.arm.com/-/media/Files/downloads/gnu-rm/9-2020q2/gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux.tar.bz2" >> $GITHUB_ENV

    - name: Download Toolchain
      run: |
        mkdir toolchain
        wget --quiet $TOOLCHAIN_URL
        tar xaf $(basename $TOOLCHAIN_URL) -C toolchain --strip-components=1
        echo "PATH=$(pwd)/toolchain/bin/:$PATH" >> $GITHUB_ENV

    - name: Install Lit
      run: |
        # Required for distlib, used by virtualenv
        pip3 install setuptools wheel
        # A venv is the best way to be sure where 'lit' is located after install
        pip3 install virtualenv
        python3 -m virtualenv testenv
        source testenv/bin/activate
        pip3 install lit

    # [[[cog
    # import cog, itertools
    #
    # opt_levels = ("0", "s", "3")
    # sanitizers = ("OFF", "ON")
    # lto = ("OFF", "ON")
    #
    # def skip(params):
    #  opt_level, _, lto = params
    #  # LTO makes no difference at O0
    #  return opt_level == "0" and lto == "ON"
    #
    # for params in itertools.product(opt_levels, sanitizers, lto):
    #   if skip(params):
    #     continue
    #   cog.outl("- name: Build_O{}_SANITIZERS_{}_LTO_{}".format(*params))
    #   cog.outl("  run: |")
    #   cog.outl("    mkdir build_O{}_SANITIZERS_{}_LTO_{}".format(*params))
    #   cog.outl("    cd build_O{}_SANITIZERS_{}_LTO_{}".format(*params))
    #   cog.outl("    ccache -z")
    #   cog.outl("    cmake -DBUILD_PLATFORM=${{{{ matrix.build_platform }}}} -DOPT_LEVEL={} -DSANITIZERS={} -DLTO={} ../".format(*params))
    #   cog.outl("    make -j$(nproc) make_demos")
    #   cog.outl("    ccache -s")
    #   cog.outl()
    # ]]]
    - name: Build_O0_SANITIZERS_OFF_LTO_OFF
      run: |
        mkdir build_O0_SANITIZERS_OFF_LTO_OFF
        cd build_O0_SANITIZERS_OFF_LTO_OFF
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=0 -DSANITIZERS=OFF -DLTO=OFF ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_O0_SANITIZERS_ON_LTO_OFF
      run: |
        mkdir build_O0_SANITIZERS_ON_LTO_OFF
        cd build_O0_SANITIZERS_ON_LTO_OFF
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=0 -DSANITIZERS=ON -DLTO=OFF ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_Os_SANITIZERS_OFF_LTO_OFF
      run: |
        mkdir build_Os_SANITIZERS_OFF_LTO_OFF
        cd build_Os_SANITIZERS_OFF_LTO_OFF
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=s -DSANITIZERS=OFF -DLTO=OFF ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_Os_SANITIZERS_OFF_LTO_ON
      run: |
        mkdir build_Os_SANITIZERS_OFF_LTO_ON
        cd build_Os_SANITIZERS_OFF_LTO_ON
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=s -DSANITIZERS=OFF -DLTO=ON ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_Os_SANITIZERS_ON_LTO_OFF
      run: |
        mkdir build_Os_SANITIZERS_ON_LTO_OFF
        cd build_Os_SANITIZERS_ON_LTO_OFF
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=s -DSANITIZERS=ON -DLTO=OFF ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_Os_SANITIZERS_ON_LTO_ON
      run: |
        mkdir build_Os_SANITIZERS_ON_LTO_ON
        cd build_Os_SANITIZERS_ON_LTO_ON
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=s -DSANITIZERS=ON -DLTO=ON ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_O3_SANITIZERS_OFF_LTO_OFF
      run: |
        mkdir build_O3_SANITIZERS_OFF_LTO_OFF
        cd build_O3_SANITIZERS_OFF_LTO_OFF
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=3 -DSANITIZERS=OFF -DLTO=OFF ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_O3_SANITIZERS_OFF_LTO_ON
      run: |
        mkdir build_O3_SANITIZERS_OFF_LTO_ON
        cd build_O3_SANITIZERS_OFF_LTO_ON
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=3 -DSANITIZERS=OFF -DLTO=ON ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_O3_SANITIZERS_ON_LTO_OFF
      run: |
        mkdir build_O3_SANITIZERS_ON_LTO_OFF
        cd build_O3_SANITIZERS_ON_LTO_OFF
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=3 -DSANITIZERS=ON -DLTO=OFF ../
        make -j$(nproc) make_demos
        ccache -s

    - name: Build_O3_SANITIZERS_ON_LTO_ON
      run: |
        mkdir build_O3_SANITIZERS_ON_LTO_ON
        cd build_O3_SANITIZERS_ON_LTO_ON
        ccache -z
        cmake -DBUILD_PLATFORM=${{ matrix.build_platform }} -DOPT_LEVEL=3 -DSANITIZERS=ON -DLTO=ON ../
        make -j$(nproc) make_demos
        ccache -s

    # [[[end]]]

    # This allows us to require that the steps above succeed
    # Then also allow the test steps to run regardless of the job state
    # (which will be failed if some tests fail)
    # If we used continue-on-error for the test steps then they would be marked
    # as passing in the UI, which isn't very intuitive.
    - name: Set SHOULD_CONTINUE=YES
      run: echo "SHOULD_CONTINUE=YES" >> $GITHUB_ENV
      if: ${{ success() }}
    - name: Set SHOULD_CONTINUE=NO
      run: echo "SHOULD_CONTINUE=NO" >> $GITHUB_ENV
      if: ${{ failure() }}

    # [[[cog
    # for params in itertools.product(opt_levels, sanitizers, lto):
    #   if skip(params):
    #     continue
    #   cog.outl("- name: Test_O{}_SANITIZERS_{}_LTO_{}".format(*params))
    #   cog.outl("  run: |")
    #   cog.outl("    source testenv/bin/activate")
    #   cog.outl("    cd build_O{}_SANITIZERS_{}_LTO_{}".format(*params))
    #   cog.outl("    # TODO: With multiple threads we sometimes get an error reading progress file")
    #   cog.outl("    lit ../demos/ --xunit-xml-output results.xml -a -j1")
    #   cog.outl("  if: ${{ env.SHOULD_CONTINUE == 'YES' && ( failure() || success() ) }}")
    #   cog.outl()
    # ]]]
    - name: Test_O0_SANITIZERS_OFF_LTO_OFF
      run: |
        source testenv/bin/activate
        cd build_O0_SANITIZERS_OFF_LTO_OFF
        # TODO: With multiple threads we sometimes get an error reading progress file
        lit ../demos/ --xunit-xml-output results.xml -a -j1
      if: ${{ env.SHOULD_CONTINUE == 'YES' && ( failure() || success() ) }}

    - name: Test_O0_SANITIZERS_ON_LTO_OFF
      run: |
        source testenv/bin/activate
        cd build_O0_SANITIZERS_ON_LTO_OFF
        # TODO: With multiple threads we sometimes get an error reading progress file
        lit ../demos/ --xunit-xml-output results.xml -a -j1
      if: ${{ env.SHOULD_CONTINUE == 'YES' && ( failure() || success() ) }}

    - name: Test_Os_SANITIZERS_OFF_LTO_OFF
      run: |
        source testenv/bin/activate
        cd build_Os_SANITIZERS_OFF_LTO_OFF
        # TODO: With multiple threads we sometimes get an error reading progress file
        lit ../demos/ --xunit-xml-output results.xml -a -j1
      if: ${{ env.SHOULD_CONTINUE == 'YES' && ( failure() || success() ) }}

    - name: Test_Os_SANITIZERS_OFF_LTO_ON
      run: |
        source testenv/bin/activate
        cd build_Os_SANITIZERS_OFF_LTO_ON
        # TODO: With multiple threads we sometimes get an error reading progress file
        lit ../demos/ --xunit-xml-output results.xml -a -j1
      if: ${{ env.SHOULD_CONTINUE == 'YES' && ( failure() || success() ) }}

    - name: Test_Os_SANITIZERS_ON_LTO_OFF
      run: |
        source testenv/bin/activate
        cd build_Os_SANITIZERS_ON_LTO_OFF
        # TODO: With multiple threads we sometimes get an error reading progress file
        lit ../demos/ --xunit-xml-output results.xml -a -j1
      if: ${{ env.SHOULD_CONTINUE == 'YES' && ( failure() || success() ) }}

    - name: Test_Os_SANITIZERS_ON_LTO_ON
      run: |
        source testenv/bin/activate
        cd build_Os_SANITIZERS_ON_LTO_ON
        # TODO: With multiple threads we sometimes get an error reading progress file
        lit ../demos/ --xunit-xml-output results.xml -a -j1
      if: ${{ env.SHOULD_CONTINUE == 'YES' && ( failure() || success() ) }}

    - name: Test_O3_SANITIZERS_OFF_LTO_OFF
      run: |
        source testenv/bin/activate
        cd build_O3_SANITIZERS_OFF_LTO_OFF
        # TODO: With multiple threads we sometimes get an error reading progress file
        lit ../demos/ --xunit-xml-output results.xml -a -j1
      if: ${{ env.SHOULD_CONTINUE == 'YES' && ( failure() || success() ) }}

    - name: Test_O3_SANITIZERS_OFF_LTO_ON
      run: |
        source testenv/bin/activate
        cd build_O3_SANITIZERS_OFF_LTO_ON
        # TODO: With multiple threads we sometimes get an error reading progress file
        lit ../demos/ --xunit-xml-output results.xml -a -j1
      if: ${{ env.SHOULD_CONTINUE == 'YES' && ( failure() || success() ) }}

    - name: Test_O3_SANITIZERS_ON_LTO_OFF
      run: |
        source testenv/bin/activate
        cd build_O3_SANITIZERS_ON_LTO_OFF
        # TODO: With multiple threads we sometimes get an error reading progress file
        lit ../demos/ --xunit-xml-output results.xml -a -j1
      if: ${{ env.SHOULD_CONTINUE == 'YES' && ( failure() || success() ) }}

    - name: Test_O3_SANITIZERS_ON_LTO_ON
      run: |
        source testenv/bin/activate
        cd build_O3_SANITIZERS_ON_LTO_ON
        # TODO: With multiple threads we sometimes get an error reading progress file
        lit ../demos/ --xunit-xml-output results.xml -a -j1
      if: ${{ env.SHOULD_CONTINUE == 'YES' && ( failure() || success() ) }}

    # [[[end]]]

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v1
      with:
        report_paths: '**/results.xml'
        github_token: ${{ secrets.GITHUB_TOKEN }}
        check_name: ${{ matrix.build_platform }}
      if: ${{ env.SHOULD_CONTINUE == 'YES' && ( failure() || success() ) }}
